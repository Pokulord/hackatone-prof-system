#include "RoleService.h"

RoleService::RoleService(std::shared_ptr<IRoleRepository> repo) : roleRepository(std::move(repo)) {}

std::optional<Role> RoleService::getRoleById(int id) {
    return roleRepository->findById(id);
}

std::vector<Role> RoleService::getAllRoles() {
    return roleRepository->findAll();
}

bool RoleService::createRole(const std::string& name) {
    if (roleRepository->findByName(name)) {
        return false; // Role with this name already exists
    }
    // The ID is not passed here because it's expected to be auto-generated by the database.
    // The save method in the repository should only need the name.
    // We create a dummy Role object, but the repository will only use the name.
    Role newRole(0, name); 
    return roleRepository->save(newRole);
}

bool RoleService::updateRole(int id, const std::string& newName) {
    auto existingRole = roleRepository->findById(id);
    if (!existingRole) {
        return false; // Role not found
    }
    // Check if another role with the new name already exists
    auto roleWithNewName = roleRepository->findByName(newName);
    if (roleWithNewName && roleWithNewName->getId() != id) {
        return false; // Another role with this name already exists
    }

    Role roleToUpdate(id, newName);
    return roleRepository->update(roleToUpdate);
}

bool RoleService::deleteRole(int id) {
    return roleRepository->remove(id);
}
