#include "usersInfo_window.h"
#include "ui_usersInfo_window.h"
#include "adduser_dialog.h"
#include "edituser_dialog.h"
#include <QToolBar>
#include <QTableWidget>
#include <QHeaderView>
#include <QMessageBox>
#include <QInputDialog>
#include <QVBoxLayout>

UsersInfoWindow::UsersInfoWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::UsersInfoWindow)
{
    ui->setupUi(this);

    setWindowTitle("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏");
    setWindowIcon(QIcon("B:/hackatone-prof-system/frontend/ProfSystemFrontend/resources/logo.jpg"));
    setMinimumSize(1000, 600);

    setupToolbar();
    setupTable();
    loadUsers();

    QWidget *centralWidget = new QWidget(this);
    QVBoxLayout *layout = new QVBoxLayout(centralWidget);
    layout->addWidget(ui->usersTable);
    layout->setContentsMargins(10, 10, 10, 10); // –ù–µ–±–æ–ª—å—à–∏–µ –æ—Ç—Å—Ç—É–ø—ã
    setCentralWidget(centralWidget);
}

void UsersInfoWindow::setupToolbar()
{
    QToolBar *toolbar = addToolBar("–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è");

    QAction *addAction = toolbar->addAction("‚ûï –î–æ–±–∞–≤–∏—Ç—å");
    QAction *editAction = toolbar->addAction("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
    QAction *deleteAction = toolbar->addAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å");
    QAction *refreshAction = toolbar->addAction("üîÑ –û–±–Ω–æ–≤–∏—Ç—å");

    connect(addAction, &QAction::triggered, this, &UsersInfoWindow::onAddUserClicked);
    connect(editAction, &QAction::triggered, this, &UsersInfoWindow::onEditUserClicked);
    connect(deleteAction, &QAction::triggered, this, &UsersInfoWindow::onDeleteUserClicked);
    connect(refreshAction, &QAction::triggered, this, &UsersInfoWindow::onRefreshClicked);
}

void UsersInfoWindow::setupTable()
{
    QTableWidget *table = ui->usersTable;

    table->setColumnCount(4);
    table->setHorizontalHeaderLabels({"–õ–æ–≥–∏–Ω", "–†–æ–ª—å", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "–°—Ç–∞—Ç—É—Å"});

    table->setStyleSheet(
        "QTableWidget {"
        "   background: white;"
        "   border: 1px solid #bdc3c7;"
        "   border-radius: 5px;"
        "}"
        "QHeaderView::section {"
        "   background: #3498db;"
        "   color: white;"
        "   padding: 8px;"
        "   border: none;"
        "}"
        );

    table->horizontalHeader()->setStretchLastSection(true);
    table->setSelectionBehavior(QAbstractItemView::SelectRows);
    table->setEditTriggers(QAbstractItemView::NoEditTriggers);
}

void UsersInfoWindow::loadUsers()
{
    // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ API
    QTableWidget *table = ui->usersTable;
    table->setRowCount(3);

    QStringList users = {
        "admin|–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä|2024-01-15|–ê–∫—Ç–∏–≤–µ–Ω",
        "user1|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å|2024-01-20|–ê–∫—Ç–∏–≤–µ–Ω",
        "operator|–û–ø–µ—Ä–∞—Ç–æ—Ä|2024-01-25|–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    };

    for (int i = 0; i < users.size(); ++i) {
        QStringList fields = users[i].split('|');
        for (int j = 0; j < fields.size(); ++j) {
            QTableWidgetItem *item = new QTableWidgetItem(fields[j]);

            if (j == 3) {
                item->setForeground(fields[j] == "–ê–∫—Ç–∏–≤–µ–Ω" ? Qt::darkGreen : Qt::red);
            }

            table->setItem(i, j, item);
        }
    }
}

void UsersInfoWindow::onAddUserClicked()
{
    AddUserDialog dialog(this);

    if (dialog.exec() == QDialog::Accepted) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        QString username = dialog.username();
        QString role = dialog.role();

        // TODO: –í—ã–∑–æ–≤ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        statusBar()->showMessage("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + username + " –¥–æ–±–∞–≤–ª–µ–Ω");
        loadUsers();

        qDebug() << "–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" << username << role;
    }
}

#include "edituser_dialog.h"

void UsersInfoWindow::onEditUserClicked()
{
    QTableWidget *table = ui->usersTable;
    int row = table->currentRow();

    if (row == -1) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    QString username = table->item(row, 0)->text();
    QString currentRole = table->item(row, 1)->text();
    QString currentStatus = table->item(row, 3)->text();

    EditUserDialog dialog(this);
    dialog.setUserData(username, UserRoles::getRoleFromName(currentRole), currentStatus);

    if (dialog.exec() == QDialog::Accepted) {
        UserRoles::Role newRole = dialog.role();
        QString newStatus = dialog.status();

        if (dialog.shouldResetPassword()) {
            // TODO: –í—ã–∑–æ–≤ API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        table->item(row, 1)->setText(UserRoles::getRoleName(newRole));
        // TODO: –û–±–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –∫–æ–≥–¥–∞ –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        statusBar()->showMessage("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + username + " –æ–±–Ω–æ–≤–ª–µ–Ω");

        qDebug() << "–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" << username
                 << "–†–æ–ª—å:" << UserRoles::getRoleName(newRole)
                 << "–°—Ç–∞—Ç—É—Å:" << newStatus
                 << "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è:" << dialog.shouldResetPassword();
    }
}

void UsersInfoWindow::onDeleteUserClicked()
{
    QTableWidget *table = ui->usersTable;
    int row = table->currentRow();

    if (row == -1) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
        return;
    }

    QString userToDelete = table->item(row, 0)->text();

    QMessageBox::StandardButton reply = QMessageBox::question(this, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
        "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userToDelete + "?",
        QMessageBox::Yes | QMessageBox::No);

    if (reply == QMessageBox::Yes) {
        // TODO: –í—ã–∑–æ–≤ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        table->removeRow(row);
        statusBar()->showMessage("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userToDelete + " —É–¥–∞–ª–µ–Ω");
    }
}

void UsersInfoWindow::onRefreshClicked()
{
    loadUsers();
    statusBar()->showMessage("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω");
}

UsersInfoWindow::~UsersInfoWindow()
{
    delete ui;
}
